** start of main.py **

def arithmetic_arranger(problems, show_answers=False):
    error = problems_format_checker(problems)
    if error:
        return error
    return arranged_problems_string(problems, show_answers)

def problems_format_checker(problems):
    if len(problems) == 0:
        return "Error: Problem list is empty."
    if len(problems) > 5:
        return "Error: Too many problems."
    for problem in problems:
        parts = problem.split()
        if parts[1] not in ["+", "-"]:
            return "Error: Operator must be '+' or '-'."
        if not parts[0].isdigit() or not parts[2].isdigit():
            return "Error: Numbers must only contain digits."
        if len(parts[0]) > 4 or len(parts[2]) > 4:
            return "Error: Numbers cannot be more than four digits."
    return ""

def arranged_problems_string(problems, show_answers=False):
    first_operands = []
    second_operands = []
    operators = []
    widths = []

    for problem in problems:
        op1, operator, op2 = problem.split()
        width = max(len(op1), len(op2)) + 2
        first_operands.append(op1)
        second_operands.append(op2)
        operators.append(operator)
        widths.append(width)

    top_line = ""
    bottom_line = ""
    dash_line = ""
    answer_line = ""

    for i in range(len(problems)):
        top_line += " " * (widths[i] - len(first_operands[i])) + first_operands[i]
        bottom_line += operators[i] + " " * (widths[i] - len(second_operands[i]) - 1) + second_operands[i]
        dash_line += "-" * widths[i]
        if show_answers:
            result = str(eval(f"{first_operands[i]} {operators[i]} {second_operands[i]}"))
            answer_line += " " * (widths[i] - len(result)) + result
        if i < len(problems) - 1:
            top_line += "    "
            bottom_line += "    "
            dash_line += "    "
            if show_answers:
                answer_line += "    "

    arranged = top_line + "\n" + bottom_line + "\n" + dash_line
    if show_answers:
        arranged += "\n" + answer_line
    return arranged


** end of main.py **

